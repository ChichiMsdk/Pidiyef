NAME = pdf
EXTENSION =
OUTPUT = $(NAME)$(EXTENSION)
BUILD_DIR = build
OBJ_DIR = build/obj
JSON_FILE = temp.json
CC = clang 
CPP = clang++

SRC_DIR = src
SRC_1_DIR = src/platform
SRC_2_DIR = src/engine
SRC_3_DIR = src/import
SRC_4_DIR = src/renderer/vulkan

INCLUDE_DIRS =-Isrc -I/home/chichi/git/tracy/public\
			  -I/home/chichi/git/tracy/public/tracy

LIBS =-lSDL2main -lSDL2 -lSDL2_image -lmupdf -lmupdf-third -lpthread -lm
CPPLIBS = -lstdc++

LIB_PATH =

CFLAGS =-DPLATFORM_LINUX
CFLAGS += -g3 -O3 -fdeclspec -MJ$(JSON_FILE)
CFLAGS +=-DTRACY_ENABLE
# -fsanitize=address
# CFLAGS = -MT -DTRACY_ENABLE -DTRACY_ENABLE

CPPFLAGS =-DPLATFORM_LINUX -Wno-format
CPPFLAGS +=-DTRACY_ENABLE
# -fsanitize=address
# -DTRACY_ENABLE 

FILES = $(wildcard $(SRC_DIR)/*.c) $(wildcard $(SRC_1_DIR)/*.c)\
		$(wildcard $(SRC_2_DIR)/*.c) $(wildcard $(SRC_3_DIR)/*.c)\
		$(wildcard $(SRC_4_DIR)/*.c)

CPP_FILES = $(wildcard $(SRC_DIR)/*.cpp)

OBJS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(FILES))
OBJS := $(patsubst $(OBJ_DIR)/platform/%.o, $(OBJ_DIR)/%.o, $(OBJS))
OBJS := $(patsubst $(OBJ_DIR)/engine/%.o, $(OBJ_DIR)/%.o, $(OBJS))
OBJS := $(patsubst $(OBJ_DIR)/import/%.o, $(OBJ_DIR)/%.o, $(OBJS))
OBJS := $(patsubst $(OBJ_DIR)/vulkan/%.o, $(OBJ_DIR)/%.o, $(OBJS))

CPP_OBJS = $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CPP_FILES))

all: $(BUILD_DIR)/$(OUTPUT) compile_commands.json

$(BUILD_DIR)/$(OUTPUT): $(OBJS) $(CPP_OBJS)
	$(CC) $(CFLAGS) -o $@ $^ $(INCLUDE_DIRS) $(LIB_PATH) $(LIBS) $(CPPLIBS)
	@rm -f $(JSON_FILE)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	-$(CPP) $(CPPFLAGS) -c $< -o $@ $(INCLUDE_DIRS)
	@-cat $(JSON_FILE) >> soon.json

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE_DIRS)
	@-cat $(JSON_FILE) >> soon.json

$(OBJ_DIR)/%.o: $(SRC_1_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE_DIRS)
	@-cat $(JSON_FILE) >> soon.json

$(OBJ_DIR)/%.o: $(SRC_2_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE_DIRS)
	@-cat $(JSON_FILE) >> soon.json

$(OBJ_DIR)/%.o: $(SRC_3_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE_DIRS)
	@-cat $(JSON_FILE) >> soon.json

$(OBJ_DIR)/%.o: $(SRC_4_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDE_DIRS)
	@-cat $(JSON_FILE) >> soon.json

$(OBJ_DIR): $(BUILD_DIR)
	@mkdir -p build/obj

$(BUILD_DIR):
	@mkdir -p build

compile_commands.json:
	@echo [ > compile_commands.json
	@-cat soon.json >> compile_commands.json
	@echo ] >> compile_commands.json
	@rm -f soon.json

clean:
	@echo Deleting files..
	rm -f $(BUILD_DIR)/$(NAME)$(EXTENSION)
	rm -f $(BUILD_DIR)/$(NAME).pdb
	rm -f $(BUILD_DIR)/$(NAME).exp
	rm -f $(BUILD_DIR)/$(NAME).lib
	rm -f $(BUILD_DIR)/vc140.pdb
	rm -f $(BUILD_DIR)/*.obj
	rm -f $(BUILD_DIR)/obj/*.o
	rm -f $(BUILD_DIR)/*.ilk

fclean: clean
	rm -f compile_commands.json

re: fclean all

.PHONY: all clean re
